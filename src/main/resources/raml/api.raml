#%RAML 0.8
title: Lunch vote system
version: 1.0.1-SNAPSHOT
protocols: [ HTTP ]
baseUri: http://lunchvotesystem.servehttp.com:8080/
mediaType: application/json
schemas:
  - Error: !include Error.schema.json
  - Hello: !include Hello.schema.json
  - StatusDatabase: !include StatusDatabase.schema.json
  - Accounts: !include Accounts.schema.json
  - Restaurant: !include Restaurant.schema.json
  - Restaurant_Page: !include Restaurant_Page.schema.json
  - Restaurant_Result: !include Restaurant_Result.schema.json
  - VoteScore: !include VoteScore.schema.json
  - VoteStatus: !include VoteStatus.schema.json
securitySchemes:
  - basic:
      description: Basic Authentication
      type: Basic Authentication
/hello:
  get:
    description: Very simple REST service, that always send 'Hello' JSON in response
    responses:
      200:
        body:
          application/json:
            schema: Hello
/status:
  /database:
    get:
      description: Show status of Database subsystem
      responses:
        200:
          body:
            application/json:
              schema: StatusDatabase
/account:
  get:
    description: Simple list of exists accounts
    securedBy: [basic: { role: ADMIN }]
    responses:
      200:
        body:
          application/json:
            schema: Accounts
      401:
        description: Authentication is required
        body:
          application/json:
            schema: Error
      403:
        description: Access is denied
        body:
          application/json:
            schema: Error
/api/restaurant:
  get:
    description: List of Restaurants
    securedBy: [basic]
    queryParameters:
      size:
        description: Page size
        default: 20
        required: false
        type: number
      page:
        description: Page number (0-based)
        default: 0
        required: false
        type: number
    responses:
      200:
        body:
          application/json:
            schema: Restaurant_Page
      401:
        description: Authentication is required
        body:
          application/json:
            schema: Error
      403:
        description: Access is denied
        body:
          application/json:
            schema: Error
  put:
    description: Create new Restaurant
    securedBy: [basic: { role: ADMIN }]
    body:
      application/json:
        schema: Restaurant
    responses:
      201:
        body:
          application/json:
            schema: Restaurant_Result
        headers:
          Location:
            description: URL of created Restaurant
            type: string
            required: true
      409:
        description: Restaurant information does not pass validation
        body:
          application/json:
            schema: Restaurant_Result
      401:
        description: Authentication is required
        body:
          application/json:
            schema: Error
      403:
        description: Access is denied
        body:
          application/json:
            schema: Error
  /${id}:
    get:
      description: Get one Restaurant information
      securedBy: [basic]
      responses:
        200:
          body:
            application/json:
              schema: Restaurant
        404:
          description: Restaurant with id not found
        401:
          description: Authentication is required
          body:
            application/json:
              schema: Error
        403:
          description: Access is denied
          body:
            application/json:
              schema: Error
    delete:
      description: Delete Restaurant by id
      securedBy: [basic: { role: ADMIN }]
      responses:
        200:
          description: Restaurant successfully deleted
        404:
          description: Restaurant with id not found
        401:
          description: Authentication is required
          body:
            application/json:
              schema: Error
        403:
          description: Access is denied
          body:
            application/json:
              schema: Error
    patch:
      description: Update exists Restaurant with partial JSON information
      securedBy: [basic: { role: ADMIN }]
      body:
        application/json:
          schema: Restaurant
      responses:
        200:
          description: Restaurant successfully patched
          body:
            application/json:
              schema: Restaurant_Result
        409:
          description: Restaurant information does not pass validation
          body:
            application/json:
              schema: Restaurant_Result
        404:
          description: Restaurant with id not found
        401:
          description: Authentication is required
          body:
            application/json:
              schema: Error
        403:
          description: Access is denied
          body:
            application/json:
              schema: Error
    put:
      description: Update exists Restaurant with full JSON information
      securedBy: [basic: { role: ADMIN }]
      body:
        application/json:
          schema: Restaurant
      responses:
        200:
          description: Restaurant successfully updated
          body:
            application/json:
              schema: Restaurant_Result
        409:
          description: Restaurant information does not pass validation
          body:
            application/json:
              schema: Restaurant_Result
        404:
          description: Restaurant with id not found
        401:
          description: Authentication is required
          body:
            application/json:
              schema: Error
        403:
          description: Access is denied
          body:
            application/json:
              schema: Error
    /vote:
      post:
        description: Update vote status for current restaurant and authorized account
        securedBy: [basic]
        queryParameters:
          datetime:
            description: Datetime for vote
            default: current datetime
            required: false
            type: string
            pattern: yyyy-MM-dd'T'HH:MM:ss.SSS'Z['ZZZ']'
            example: 2015-10-21T10:30:21.000Z[GMT]
        responses:
          201:
            description: Vote stored
            body:
              application/json:
                schema: VoteStatus
          202:
            description: Vote updated
            body:
              application/json:
                schema: VoteStatus
          304:
            description: Vote already saved and used now can not change it
            body:
              application/json:
                schema: VoteStatus
          404:
            description: Restaurant with id not found
          401:
            description: Authentication is required
            body:
              application/json:
                schema: Error
          403:
            description: Access is denied
            body:
              application/json:
                schema: Error
  /vote:
    get:
      description: Return vote score for some date
      securedBy: [basic]
      queryParameters:
        date: 
          description: Date for score status
          default: current date
          required: false
          type: string
          pattern: yyyy-MM-dd
          example: 2015-11-01
      responses:
        200:
          description: Vote score
          body:
            application/json:
              schema: VoteScore
        401:
          description: Authentication is required
          body:
            application/json:
              schema: Error
        403:
          description: Access is denied
          body:
            application/json:
              schema: Error
